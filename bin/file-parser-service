; ~*~ mode: clojure; ~*~

(import '[java.io FileInputStream]
        '[java.nio ByteBuffer]
        '[java.util.concurrent Executors ExecutorService TimeUnit]
        '[org.zeromq SocketType ZMQ ZContext]
        '[org.antlr.v4.runtime CommonTokenFactory UnbufferedCharStream UnbufferedTokenStream]
        '[sentient CSVStreamLexer CSVStreamParser
          DictionaryListLexer DictionaryListParser
          ParseProtos$ParseFileRequest ParseProtos$ParseFileResponse
          ParseProtos$ParseFileRequest$FileType])

(defmacro while-not [test & body]
  `(while (not ~test)
     ~@body))

(defmacro with-open-all [bindings & body]
  (if (seq bindings)
    (let [binding (vec (take 2 bindings))
          bindings (drop 2 bindings)]
      `(with-open ~binding
         (with-open-all ~bindings ~@body)))
    `(do ~@body)))

(defmacro close-all-after [closeables & body]
  (if-let [closeable (first closeables)]
    `(try
       (close-after ~(rest closeables) ~@body)
       (finally
         (.close ~closeable)))
    `(do ~@body)))

(defn ->lexer [file-type input]
  (doto
    (condp = file-type
      ParseProtos$ParseFileRequest$FileType/CSV (CSVStreamLexer. input)
      ParseProtos$ParseFileRequest$FileType/DICTIONARY_LIST (DictionaryListLexer. input))
    (.setTokenFactory (CommonTokenFactory. true))))

(defn ->parser [file-type tokens output-socket input-socket]
  (doto
    (condp = file-type
      ParseProtos$ParseFileRequest$FileType/CSV (CSVStreamParser. tokens)
      ParseProtos$ParseFileRequest$FileType/DICTIONARY_LIST (DictionaryListParser. tokens))
    (.setBuildParseTree false)
    (.outputSocket output-socket)
    (.inputSocket input-socket)))

(deftype ParseFileWorker [context service-socket request]
  Runnable
  (run [this]
    (with-open-all [input-socket (doto (.createSocket context SocketType/PULL)
                                   (.connect (format "tcp://127.0.0.1:%d"
                                                     (.getOutputPort request))))
                    output-socket (.createSocket context SocketType/PUSH)]
      (let [output-port (.bindToRandomPort output-socket "tcp://127.0.0.1")
            file-path (.getFilePath request)
            input-stream (FileInputStream. file-path)
            input (UnbufferedCharStream. input-stream)
            file-type (.getFileType request)
            lexer (->lexer file-type input)
            tokens (UnbufferedTokenStream. lexer)
            parser (->parser file-type tokens output-socket input-socket)
            response (.. (ParseProtos$ParseFileResponse/newBuilder)
                         (setOutputPort output-port)
                         (build)
                         (toByteArray))]
        (.send service-socket response 0)
        (printf "Parsing file [%s] on port [%d]%n" file-path output-port)
        (flush)
        (.parse parser)
        (printf "Parsed [%d] rows from file [%s] on port [%d]%n"
                (.numRows parser) file-path output-port)
        (flush)))))

(with-open-all [context (ZContext.)
                service-socket (.createSocket context SocketType/REP)]
  (let [service-port (.bindToRandomPort service-socket "tcp://127.0.0.1")
        worker-pool (Executors/newCachedThreadPool)]
    (printf "Started service on port [%d]%n" service-port)
    (flush)
    (try
      (while-not (.isInterrupted (Thread/currentThread))
        (let [request (ParseProtos$ParseFileRequest/parseFrom (.recv service-socket 0))
              worker (ParseFileWorker. context service-socket request)]
          (.execute worker-pool worker)))
      (finally
        (println "Shutting-down worker pool ...")
        (.shutdownNow worker-pool)
        (println "Waiting a maximum of 60 seconds for the worker pool to terminate ...")
        (if-not (.awaitTermination worker-pool 60 TimeUnit/SECONDS)
          (.println *err* "Worker pool failed to terminate in a timely fashion.")
          (println "Worker pool terminated successfully."))))))

; vim: set ft=clojure ts=2 sw=2 et sta:
