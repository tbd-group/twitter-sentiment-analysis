import gzip
import itertools
import pickle
import random
import sys

import zmq

from sentient.parse_pb2 import (CsvRow, DictionaryList, ParseFileRequest,
                                ParseFileResponse)


def file_to_wordset(file_path, service_port):
    ''' Converts a file with a word per line to a Python set '''
    dictionary_list = parse_dictionary_list(file_path, service_port)
    return set(dictionary_list.term)


def write_status(i, total):
    ''' Writes status of a process to console '''
    sys.stdout.write('\r')
    sys.stdout.write('Processing %d/%d' % (i, total))
    sys.stdout.flush()


def save_results_to_csv(results, csv_file):
    ''' Save list of type [(tweet_id, positive)] to csv in Kaggle format '''
    with open(csv_file, 'w') as csv:
        csv.write('id,prediction\n')
        for tweet_id, pred in results:
            csv.write(tweet_id)
            csv.write(',')
            csv.write(str(pred))
            csv.write('\n')


def top_n_words(pkl_file_name, N, shift=0):
    """
    Returns a dictionary of form {word:rank} of top N words from a pickle
    file which has a nltk FreqDist object generated by stats.py

    Args:
        pkl_file_name (str): Name of pickle file
        N (int): The number of words to get
        shift: amount to shift the rank from 0.
    Returns:
        dict: Of form {word:rank}
    """
    with open(pkl_file_name, 'rb') as pkl_file:
        freq_dist = pickle.load(pkl_file)
    most_common = freq_dist.most_common(N)
    words = {p[0]: i + shift for i, p in enumerate(most_common)}
    return words


def top_n_bigrams(pkl_file_name, N, shift=0):
    """
    Returns a dictionary of form {bigram:rank} of top N bigrams from a pickle
    file which has a Counter object generated by stats.py

    Args:
        pkl_file_name (str): Name of pickle file
        N (int): The number of bigrams to get
        shift: amount to shift the rank from 0.
    Returns:
        dict: Of form {bigram:rank}
    """
    with open(pkl_file_name, 'rb') as pkl_file:
        freq_dist = pickle.load(pkl_file)
    most_common = freq_dist.most_common(N)
    bigrams = {p[0]: i for i, p in enumerate(most_common)}
    return bigrams


def split_data(tweets, validation_split=0.1):
    """Split the data into training and validation sets

    Args:
        tweets (list): list of tuples
        validation_split (float, optional): validation split %

    Returns:
        (list, list): training-set, validation-set
    """
    index = int((1 - validation_split) * len(tweets))
    random.shuffle(tweets)
    return tweets[:index], tweets[index:]


def build_parse_file_request(file_path, file_type, output_port):
    request = ParseFileRequest()
    request.filePath = file_path
    request.fileType = file_type
    request.outputPort = output_port
    return request.SerializeToString()


def parse_file(file_path, service_port, file_type, generate):
    context = zmq.Context()
    service_socket = context.socket(zmq.REQ)
    service_socket.connect(f"tcp://127.0.0.1:{service_port}")
    output_socket = context.socket(zmq.PUSH)
    output_port = output_socket.bind_to_random_port("tcp://127.0.0.1")
    request = build_parse_file_request(file_path, file_type, output_port)
    service_socket.send(request, 0)
    response = service_socket.recv(0)
    response = ParseFileResponse.FromString(response)
    input_port = response.outputPort
    input_socket = context.socket(zmq.PULL)
    input_socket.connect(f"tcp://127.0.0.1:{input_port}")
    print(f"Parsing file [{file_path}] on port [{input_port}] ...")
    for value in generate(input_socket):
        yield value
    output_socket.send(b'')
    input_socket.close()
    output_socket.close()
    service_socket.close()


def parse_dictionary_list(dict_path, service_port):
    def generate(input_socket):
        message = input_socket.recv(0)
        message = gzip.decompress(message)
        yield DictionaryList.FromString(message)
    return next(parse_file(dict_path, service_port, ParseFileRequest.FileType.DICTIONARY_LIST, generate))


def parse_csv(csv_path, service_port):
    def generate(input_socket):
        while True:
            message = input_socket.recv(0)
            if len(message) == 0:
                break
            yield CsvRow.FromString(message)
    for value in parse_file(csv_path, service_port, ParseFileRequest.FileType.CSV, generate):
        yield value
